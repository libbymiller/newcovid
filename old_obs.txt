double x_tS = x[0]; (void) x_tS;
double x_u = x[1]; (void) x_u;
double x_death_mean = x[2]; (void) x_death_mean;
double x_hosp_admission = x[3]; (void) x_hosp_admission;
double x_icu_admission = x[4]; (void) x_icu_admission;
double x_cfr_rlo = x[5]; (void) x_cfr_rlo;
double x_cfr_rlo2 = x[6]; (void) x_cfr_rlo2;
double x_cfr_rlo3 = x[7]; (void) x_cfr_rlo3;
double x_hosp_rlo = x[8]; (void) x_hosp_rlo;
double x_icu_rlo = x[9]; (void) x_icu_rlo;
double x_icu_rlo2 = x[10]; (void) x_icu_rlo2;
double x_contact_final = x[11]; (void) x_contact_final;
double x_contact_s0 = x[12]; (void) x_contact_s0;
double x_contact_s1 = x[13]; (void) x_contact_s1;
double x_concentration1 = x[14]; (void) x_concentration1;
double x_concentration2 = x[15]; (void) x_concentration2;
double x_concentration3 = x[16]; (void) x_concentration3;
double x_sep_boost = x[17]; (void) x_sep_boost;
double x_sep_when = x[18]; (void) x_sep_when;
double x_disp_deaths = x[19]; (void) x_disp_deaths;
double x_disp_hosp_inc = x[20]; (void) x_disp_hosp_inc;
double x_disp_hosp_prev = x[21]; (void) x_disp_hosp_prev;
double x_disp_icu_prev = x[22]; (void) x_disp_icu_prev;
auto asc = [&](double x, double y0, double y1, double s0, double s1) {
    double xx = s0 + x * (s1 - s0);
    double h0 = exp(s0) / (1 + exp(s0));
    double h1 = exp(s1) / (1 + exp(s1));
    double h = (exp(xx) / (1 + exp(xx)) - h0) / (h1 - h0);
    return y0 + (y1 - y0) * h;
};
auto odds = [&](double v, double lo) {
    double a = v / (1 - v);
    return a * exp(lo) / (a * exp(lo) + 1);
};
auto clamp = [&](double v) {
    return max(0.0, min(1.0, v));
};
dyn.Obs(t, 0, 0, 0) = estimate_Rt(P, dyn, t, 0, 50);
dyn.Obs(t, 0, 3, 0) = estimate_R0(P, dyn, t, 0, 50);
if (t == 182) {
    double mode = 0.2;
    double conc = x_concentration1;
    double constant = 0.2;
    for (unsigned int a = 0; a < P.pop[0].u.size(); ++a) {
        P.pop[0].u[a]  *= (1 - constant) * dbeta((a + 0.5) / P.pop[0].u.size(), mode * (conc - 2) + 1, (1 - mode) * (conc - 2) + 1) + constant;
        P.pop[0].u2[a] *= (1 - constant) * dbeta((a + 0.5) / P.pop[0].u.size(), mode * (conc - 2) + 1, (1 - mode) * (conc - 2) + 1) + constant;
    }
}
if (t == 213) {
    double mode = 0.2;
    double conc_prev = x_concentration1;
    double conc = x_concentration2;
    double constant = 0.2;
    for (unsigned int a = 0; a < P.pop[0].u.size(); ++a) {
        P.pop[0].u[a]  /= (1 - constant) * dbeta((a + 0.5) / P.pop[0].u.size(), mode * (conc_prev - 2) + 1, (1 - mode) * (conc_prev - 2) + 1) + constant;
        P.pop[0].u[a]  *= (1 - constant) * dbeta((a + 0.5) / P.pop[0].u.size(), mode * (conc - 2) + 1, (1 - mode) * (conc - 2) + 1) + constant;
        P.pop[0].u2[a] /= (1 - constant) * dbeta((a + 0.5) / P.pop[0].u.size(), mode * (conc_prev - 2) + 1, (1 - mode) * (conc_prev - 2) + 1) + constant;
        P.pop[0].u2[a] *= (1 - constant) * dbeta((a + 0.5) / P.pop[0].u.size(), mode * (conc - 2) + 1, (1 - mode) * (conc - 2) + 1) + constant;
    }
}
if (t == 244) {
    double mode = 0.2;
    double conc_prev = x_concentration2;
    double conc = x_concentration3;
    double constant = 0.2;
    for (unsigned int a = 0; a < P.pop[0].u.size(); ++a) {
        P.pop[0].u[a]  /= (1 - constant) * dbeta((a + 0.5) / P.pop[0].u.size(), mode * (conc_prev - 2) + 1, (1 - mode) * (conc_prev - 2) + 1) + constant;
        P.pop[0].u[a]  *= (1 - constant) * dbeta((a + 0.5) / P.pop[0].u.size(), mode * (conc - 2) + 1, (1 - mode) * (conc - 2) + 1) + constant;
        P.pop[0].u2[a] /= (1 - constant) * dbeta((a + 0.5) / P.pop[0].u.size(), mode * (conc_prev - 2) + 1, (1 - mode) * (conc_prev - 2) + 1) + constant;
        P.pop[0].u2[a] *= (1 - constant) * dbeta((a + 0.5) / P.pop[0].u.size(), mode * (conc - 2) + 1, (1 - mode) * (conc - 2) + 1) + constant;
    }
}
if ((int)t % 7 == 0) {
    double ifr_table[] = {
6.7323769458505e-06, 1.23286091533955e-05, 2.25765546520787e-05, 4.13425671603776e-05, 7.5705990110502e-05, 0.000138627784177905, 0.000253832335959186, 0.000464730120732842, 0.0008506998897524, 0.00155671331288834, 0.00284694409198354, 0.00520080997320283, 0.00948182919282773, 0.0172240239580795, 0.0310841686852933, 0.081314620180305
};
    double icr_table[] = {
7.38179187087189e-05, 0.000111311781641848, 0.000166923773408984, 0.000252145562683853, 0.000392561643847379, 0.000635671959944839, 0.00104793995640509, 0.00169304849942986, 0.00262162886789115, 0.00393181428635026, 0.00585639226115313, 0.0086492633792786, 0.0120078750866475, 0.0143208990099539, 0.0133874428236233, 0.00763999370993395
};
    double adj_f1 = asc(clamp(t / 190.0),          1.0, 0.0, -4.0, 1.0);
    double adj_f3 = asc(clamp((t - 240.0) / 90.0), 0.0, 1.0, -5.0, 5.0);
    double adj_f2 = 1.0 - adj_f1 - adj_f3;
    double adj_c = asc(clamp(t/366.0), 0.0, 1.0, -6, 6);
    for (unsigned int g = 0; g < P.processes[0].prob.size(); ++g) {
        double ifr = ifr_table[g];
        double icr = icr_table[g];
        P.processes[4].prob[g][0]  = odds(ifr, adj_f1 * x_cfr_rlo + adj_f2 * x_cfr_rlo2 + adj_f3 * x_cfr_rlo3);
        P.processes[4].prob[g][1]  = 1 - P.processes[4].prob[g][0];
        P.processes[14].prob[g][0] = odds(ifr, adj_f1 * x_cfr_rlo + adj_f2 * x_cfr_rlo2 + adj_f3 * x_cfr_rlo3 /* + v2 */);
        P.processes[14].prob[g][1] = 1 - P.processes[14].prob[g][0];
        P.processes[1].prob[g][0]  = odds(icr, (1 - adj_c) * x_icu_rlo + adj_c * x_icu_rlo2);
        P.processes[1].prob[g][1]  = 1 - P.processes[1].prob[g][0];
        P.processes[11].prob[g][0] = odds(icr, (1 - adj_c) * x_icu_rlo + adj_c * x_icu_rlo2 /* + v2 */);
        P.processes[11].prob[g][1] = 1 - P.processes[11].prob[g][0];
    }
}
double detection = asc(min(t / 365.0, 1.0), 14, 1, -5.86, 33.4);
P.processes[7].delays[0]  = delay_gamma(detection, 0.59, 60, 0.25);
P.processes[15].delays[0] = delay_gamma(detection, 0.59, 60, 0.25);